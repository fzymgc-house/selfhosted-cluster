
# CI/CD & GitOps Rules

## GitOps Principles
1. **Declarative**: Entire system described declaratively
2. **Versioned**: All configurations stored in Git
3. **Immutable**: No manual changes to clusters
4. **Continuous**: Automated deployment and updates
5. **Observable**: Clear visibility into system state

## Application Deployment

### Deployment Strategies
- Use Kustomize for manifest management
- Organize by application categories
- Use consistent naming patterns
- Include proper dependencies
- Document structure purpose

### Kustomization Dependencies
- Use proper resource ordering
- Set appropriate configurations
- Enable pruning for cleanup
- Use postBuild substitutions
- Include proper error handling

## GitHub Actions Workflows

### Application Deployment
- Use kubectl for manifest application
- Configure proper authentication
- Include version tagging
- Set up automated deployment
- Include proper error handling

### Terraform Validation
- Validate syntax and format
- Check provider versions
- Run security scans
- Include proper error reporting
- Test with dry-run

### YAML Validation
- Use yamllint for formatting
- Validate Kubernetes manifests
- Check for common issues
- Include proper error messages
- Run in CI pipeline

## Renovate Configuration

### Update Strategies
- Disable major version updates by default
- Group related dependencies
- Set appropriate schedules
- Include proper automerging
- Configure vulnerability alerts

### Package Rules
- Group by component type
- Set appropriate update intervals
- Include proper labels
- Configure concurrent limits
- Set up proper notifications

## Development Workflow

### Feature Branch Workflow
- Create feature branches for changes
- Validate changes locally
- Use proper commit messages
- Create pull requests
- Wait for CI checks

### Local Testing with Kind
- Use Kind for local cluster
- Test configurations locally
- Validate deployments
- Debug issues locally

### Kubernetes Commands
- Check application status regularly
- Apply configurations when needed
- Monitor events and logs
- Debug issues systematically

- Set up alerts for failures
- Track deployment frequency
- Measure lead time
- Monitor rollback rate
