
# Troubleshooting Guide

## Common Issues & Solutions

### Application Deployment Issues

#### Kustomization Not Applying
- Check Kustomization with `kubectl apply --dry-run=client -k path/to/kustomization`
- Validate YAML syntax with `yamllint`
- Check resource dependencies and ordering
- View events with `kubectl get events -n namespace`
- Force application with `kubectl apply -k path/to/kustomization`

#### Helm Chart Failures
- Check Helm release status with `helm list -n namespace`
- View detailed status with `helm status release-name -n namespace`
- Check Helm history with `helm history release-name -n namespace`
- View Helm values with `helm get values release-name -n namespace`
- Verify chart version and dependencies

#### Image Pull Errors
- Check pod events with `kubectl describe pod`
- Verify secret exists with `kubectl get secret -n namespace`
- Check secret content with `kubectl get secret registry-secret -o yaml`
- Test registry access with `docker pull image:tag`
- Recreate pull secret if needed

### Kubernetes Issues

#### Pod Crash Loops
- Check pod status with `kubectl get pods -n namespace`
- View pod logs with `kubectl logs pod-name -n namespace --previous`
- Describe pod for events with `kubectl describe pod pod-name -n namespace`
- Check resource limits with `kubectl top pods -n namespace`
- Verify environment variables and volume mounts

#### Service Discovery Issues
- Check service endpoints with `kubectl get endpoints -n namespace`
- Test DNS resolution with `kubectl run -it --rm debug --image=busybox --restart=Never -- nslookup service.namespace`
- Check service selector with `kubectl get svc service-name -n namespace -o yaml`
- Verify pod labels with `kubectl get pods -n namespace --show-labels`
- Check NetworkPolicy restrictions

#### Storage Issues
- Check PVC status with `kubectl get pvc -n namespace`
- View PV details with `kubectl describe pv pv-name`
- Check StorageClass with `kubectl get storageclass`
- View volume events with `kubectl get events -n namespace --field-selector involvedObject.kind=PersistentVolumeClaim`
- Verify node access to storage

### Vault Issues

#### Authentication Failures
- Check Vault status with `kubectl exec -n vault vault-0 -- vault status`
- Verify Kubernetes auth with `kubectl exec -n vault vault-0 -- vault auth list`
- Check role configuration with `kubectl exec -n vault vault-0 -- vault read auth/kubernetes/role/role-name`
- Test authentication with JWT token
- Verify service account and role bindings

#### Secret Access Issues
- Check policy with `kubectl exec -n vault vault-0 -- vault policy read policy-name`
- Test secret access with `kubectl exec -n vault vault-0 -- vault kv get secret/path`
- Verify mount path with `kubectl exec -n vault vault-0 -- vault secrets list`
- Update policy permissions if needed
- Check token policies

### External Secrets Issues

#### Secret Not Syncing
- Check ExternalSecret status with `kubectl describe externalsecret secret-name -n namespace`
- Verify ClusterSecretStore with `kubectl get clustersecretstore`
- Check operator logs with `kubectl logs -n external-secrets deployment/external-secrets -f`
- Test Vault connectivity with curl
- Verify Vault path exists and authentication

### Database Issues

#### CloudNativePG Connection Issues
- Check cluster status with `kubectl get cluster -n postgres`
- View cluster details with `kubectl describe cluster main -n postgres`
- Check pod logs with `kubectl logs -n postgres main-1 -c postgres`
- Test connection with psql client
- Verify credentials and network policies

### Networking Issues

#### Traefik Routing Problems
- Check IngressRoute with `kubectl describe ingressroute app -n namespace`
- View Traefik logs with `kubectl logs -n traefik deployment/traefik`
- Check middleware with `kubectl get middleware -A`
- Verify certificate with `kubectl get certificate -n namespace`
- Test routing with curl

#### MetalLB Issues
- Check IP allocation with `kubectl get svc -A | grep LoadBalancer`
- View MetalLB logs with `kubectl logs -n metallb-system deployment/controller`
- Check address pool with `kubectl get ipaddresspool -n metallb-system`
- Verify L2 advertisement with `kubectl get l2advertisement -n metallb-system`
- Check network connectivity

### Performance Issues

#### High Memory Usage
- Check memory usage with `kubectl top nodes` and `kubectl top pods -A --sort-by=memory`
- Find memory leaks with `kubectl exec pod-name -- cat /proc/meminfo`
- Check for OOM kills with `kubectl get events -A | grep OOMKill`
- Review resource limits with `kubectl describe pod pod-name -n namespace | grep -A 5 Limits`
- Increase memory limits or fix application leaks

#### Slow Performance
- Check CPU throttling with `kubectl exec pod-name -- cat /sys/fs/cgroup/cpu/cpu.stat | grep throttled`
- View node pressure with `kubectl describe nodes | grep -A 5 Conditions`
- Check disk I/O with `kubectl exec pod-name -- iostat -x 1`
- Test network latency with `kubectl exec pod-name -- ping -c 10 service.namespace`
- Optimize application or increase resources

## Debugging Tools

### kubectl Debug Container
- Add debug container to running pod with `kubectl debug pod-name -n namespace -it --image=busybox --share-processes`
- Create debug pod with same settings with `kubectl debug pod-name -n namespace --copy-to=debug-pod --container=app -- sh`
- Use for troubleshooting running applications

### Port Forwarding
- Forward local port to pod with `kubectl port-forward -n namespace pod/pod-name 8080:80`
- Forward to service with `kubectl port-forward -n namespace svc/service-name 8080:80`
- Use for local testing and debugging

### Temporary Pods
- Run temporary shell with `kubectl run -it --rm debug --image=alpine --restart=Never -- sh`
- Test with curl using `kubectl run -it --rm curl --image=curlimages/curl --restart=Never -- curl http://service.namespace`
- Use database client with `kubectl run -it --rm psql --image=postgres:16 --restart=Never -- psql -h hostname -U username`

## Log Analysis

### Structured Log Queries
- Get logs with timestamps using `kubectl logs pod-name --timestamps=true`
- Follow logs with `kubectl logs -f pod-name`
- Get previous container logs with `kubectl logs pod-name --previous`
- Get logs for multi-container pods with `kubectl logs pod-name -c container-name`
- Get logs for all pods with label using `kubectl logs -l app=myapp --tail=100`

### Log Aggregation
- Export logs for analysis with `kubectl logs -l app=myapp > app-logs.txt`
- Search for errors with `kubectl logs -l app=myapp | grep -i error`
- Parse JSON logs with `kubectl logs pod-name | jq '.level == "error"'`
- Use for detailed log analysis

## Recovery Procedures

### Cluster Recovery
- Backup critical resources with `kubectl get all,cm,secret,pvc,pv -A -o yaml > cluster-backup.yaml`
- Restore from backup with `kubectl apply -f cluster-backup.yaml`
- Force delete stuck resources with `kubectl delete pod pod-name --grace-period=0 --force`
- Use for disaster recovery

### Data Recovery
- Restore from volume snapshot using PersistentVolumeClaim with dataSource
- Use CloudNativePG point-in-time recovery with `kubectl exec -n postgres main-1 -- barman recover --target-time "2024-01-01 12:00:00"`
- Test restore procedures regularly
- Document recovery procedures

## Monitoring Queries

### Useful Prometheus Queries
- Pod restart frequency: `rate(kube_pod_container_status_restarts_total[15m]) > 0`
- Memory pressure: `container_memory_working_set_bytes / container_spec_memory_limit_bytes > 0.9`
- CPU throttling: `rate(container_cpu_cfs_throttled_periods_total[5m]) > 0.1`
- Failed deployments: Monitor application deployment metrics
- Disk space prediction: `predict_linear(node_filesystem_free_bytes[4h], 3600 * 24) < 0`

## Emergency Procedures

### Service Degradation
1. Check monitoring dashboards
2. Review recent changes
3. Scale down non-critical services
4. Increase resources for critical services
5. Communicate status to stakeholders

### Security Incident
1. Isolate affected resources
2. Review audit logs
3. Rotate credentials
4. Patch vulnerabilities
5. Document incident

### Data Loss
1. Stop writes to affected service
2. Assess extent of loss
3. Restore from backups
4. Verify data integrity
5. Implement additional safeguards

## Useful Commands Reference

```bash
# Quick status check
alias k8s-status='kubectl get nodes,pods,svc,pvc -A | grep -v Running | grep -v Completed'

# Resource usage
alias k8s-top='kubectl top nodes; echo "---"; kubectl top pods -A --sort-by=cpu | head -20'

# Recent events
alias k8s-events='kubectl get events -A --sort-by=.lastTimestamp | tail -20'

# Application status
alias k8s-status='kubectl get all -A | grep -v "Running\|Completed"'

# Pod issues
alias k8s-issues='kubectl get pods -A | grep -v "Running\|Completed"'
```


# Pod issues
alias k8s-issues='kubectl get pods -A | grep -v "Running\|Completed"'
```
