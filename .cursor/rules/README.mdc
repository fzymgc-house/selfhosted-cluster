
# Cursor Rules for Self-Hosted Kubernetes Cluster

This directory contains comprehensive coding rules and best practices for the self-hosted Kubernetes cluster project. These rules are designed to be used with Cursor AI to maintain consistency, enforce patterns, and provide guidance for development.

## üìö Rule Files Overview

### [00-general.mdc](./00-general.mdc)
**General Project Rules**
- Project overview and architecture
- Key principles (GitOps, Security, HA)
- Code style guidelines
- Git workflow and documentation standards
- Naming conventions across all components
- File organization patterns

### [01-kubernetes.mdc](./01-kubernetes.mdc)
**Kubernetes Rules**
- Kubernetes manifest standards
- Directory structure for applications
- Certificate management with cert-manager
- External Secrets configuration
- Traefik IngressRoute patterns
- Resource limits and security contexts

### [02-ansible.mdc](./02-ansible.mdc)
**Ansible Automation Rules**
- Playbook structure and standards
- Role organization and best practices
- Variable naming conventions
- Module usage with FQCN
- Jinja2 template patterns
- Inventory management
- Error handling and idempotency
- Performance optimization

### [03-terraform.mdc](./03-terraform.mdc)
**Terraform Infrastructure Rules**
- Module structure and organization
- Provider configuration
- Resource naming conventions
- Vault-specific patterns
- Variable and output definitions
- State management
- Security considerations
- Integration with GitOps

### [04-applications.mdc](./04-applications.mdc)
**Application Deployment Rules**
- Application structure templates
- Core application configurations (Vault, Authentik, Grafana, etc.)
- Database integration patterns
- Service exposure strategies
- StatefulSet deployments
- Security configurations (RBAC, NetworkPolicies)
- Monitoring integration
- Backup strategies

### [05-security.mdc](./05-security.mdc)
**Security Best Practices**
- Secrets management with Vault
- External Secrets Operator patterns
- TLS/SSL configuration
- RBAC configurations
- Network security policies
- Pod security standards
- Authentication with Authentik
- Compliance and auditing
- Security scanning and monitoring

### [06-monitoring-observability.mdc](./06-monitoring-observability.mdc)
**Monitoring & Observability Rules**
- VictoriaMetrics configuration
- Grafana dashboard management
- Metrics standards and naming
- Logging configuration
- Alert rules and SLOs
- Dashboard templates
- Troubleshooting queries
- Performance optimization

### [07-cicd-gitops.mdc](./07-cicd-gitops.mdc)
**CI/CD & GitOps Workflows**
- Application deployment patterns
- GitHub Actions workflows
- OCI artifact management
- Renovate dependency updates
- Development workflow
- Deployment strategies
- Rollback procedures
- Secret management in CI/CD

### [08-troubleshooting.mdc](./08-troubleshooting.mdc)
**Troubleshooting Guide**
- Common issues and solutions
- Kubernetes debugging
- Vault issues
- Database problems
- Networking troubleshooting
- Performance analysis
- Recovery procedures
- Emergency response

## üéØ How to Use These Rules

### For Development
1. Review relevant rule files before starting work
2. Follow the patterns and conventions outlined
3. Use templates provided for new resources
4. Reference troubleshooting guide when issues arise

### With Cursor AI
1. These rules are automatically loaded by Cursor
2. AI will follow these patterns when generating code
3. Ask Cursor to explain specific rules when needed
4. Request code generation that follows these standards

### For Code Review
1. Use rules as a checklist during reviews
2. Ensure new code follows established patterns
3. Reference specific rules in review comments
4. Update rules when new patterns emerge

## üîÑ Maintaining Rules

### When to Update
- New patterns are established
- Technologies are added or updated
- Common issues are discovered
- Best practices evolve

### Update Process
1. Discuss changes with team
2. Update relevant rule files
3. Include examples where helpful
4. Document reasoning for changes
5. Commit with clear message

## üìå Quick Reference

### Most Important Rules
- **Always use GitOps** - No manual cluster changes
- **Secrets in Vault** - Never commit secrets to Git
- **Follow naming conventions** - Consistency is key
- **Set resource limits** - Prevent resource exhaustion
- **Enable monitoring** - Observability from day one
- **Document changes** - Update docs with code

### Common Patterns
- HelmRelease with dependencies
- ExternalSecret with Vault backend
- Traefik IngressRoute with TLS
- CloudNativePG database setup
- Grafana dashboard as code
- Ansible role structure

### Useful Commands
```bash
# Validate Kubernetes manifests
kubectl apply --dry-run=client -f manifest.yaml

# Check application status
kubectl get all -A

# Test Ansible playbook
ansible-playbook playbook.yml --check

# Validate Terraform
terraform validate

# Format check
terraform fmt -check
yamllint .
ansible-lint
```

## ü§ù Contributing

When contributing to these rules:
1. Ensure rules are clear and actionable
2. Provide examples where possible
3. Keep rules concise but comprehensive
4. Test patterns before documenting
5. Get review from team members

## üìû Support

For questions about these rules:
- Review the relevant rule file
- Check the troubleshooting guide
- Consult team documentation
- Ask in team channels

---

*These rules are living documents and should be updated as the project evolves.*


---

*These rules are living documents and should be updated as the project evolves.*
