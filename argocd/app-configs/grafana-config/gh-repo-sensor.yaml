apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: grafana-config-gh-repo-sensor
  namespace: argo-events
spec:
  template:
    serviceAccountName: operate-workflow-sa
    container:
      env:
        - name: LOG_LEVEL
          value: info    
  dependencies:
    - name: github-event-source
      eventSourceName: github
      eventName: fzymgc-house
      filters:
        script: |-
          -- Configuration
          local TARGET_PATH_PREFIX = "tf/grafana/"
          local ALLOWED_EVENT_TYPES = { push = true, create = true }
          local TARGET_REF = "refs/heads/main"
          local TARGET_REPOSITORY = "selfhosted-cluster"

          -- Debug logging (toggle to true to enable)
          local DEBUG = false
          local dbg
          if DEBUG then
            dbg = function(...) print(...) end
          else
            dbg = function(...) end
          end

          local function starts_with(str, prefix)
            if type(str) ~= "string" or type(prefix) ~= "string" then
              return false
            end
            return string.sub(str, 1, #prefix) == prefix
          end

          local function has_matching_files(commit)
            if type(commit) ~= "table" then
              dbg("Commit is not a table; type=", type(commit))
              return false
            end

            local function any_file_matches(files)
              if type(files) ~= "table" then return false end
              for i = 1, #files do
                local file = files[i]
                if starts_with(file, TARGET_PATH_PREFIX) then
                  dbg("Matched changed file with prefix:", file)
                  return true
                end
              end
              return false
            end

            if any_file_matches(commit.added) then return true end
            if any_file_matches(commit.removed) then return true end
            if any_file_matches(commit.modified) then return true end

            return false
          end

          local function get_event_type(evt)
            local headers = evt and (evt.headers or evt.header) or nil
            if type(headers) == "table" then
              dbg("Headers present; attempting to resolve X-GitHub-Event")
            else
              dbg("Headers missing or not a table; type=", type(headers))
            end
            if type(headers) ~= "table" then
              return nil
            end
            -- Helper: normalize header value (string or first element of string array)
            local function first_string(v)
              if type(v) == "string" then return v end
              if type(v) == "table" then
                for i = 1, #v do
                  if type(v[i]) == "string" then return v[i] end
                end
              end
              return nil
            end

            -- Fast path for common header casings
            local ev = first_string(headers["X-GitHub-Event"]) or
                      first_string(headers["x-github-event"]) or
                      first_string(headers["X-Github-Event"]) or
                      first_string(headers["X-GITHUB-EVENT"]) or
                      first_string(headers["x-GitHub-Event"]) or
                      nil

            -- Fallback: case-insensitive scan
            if ev == nil then
              for k, v in pairs(headers) do
                if type(k) == "string" and string.lower(k) == "x-github-event" then
                  ev = first_string(v)
                  break
                end
              end
            end

            if ev == nil then
              dbg("GitHub event header not found in headers")
            else
              dbg("GitHub event header:", ev)
            end
            return ev
          end

          local function filter(evt)
            dbg("Lua filter started")
            -- Extract and validate event type first
            local event_type = get_event_type(evt)
            if not (event_type and ALLOWED_EVENT_TYPES[event_type]) then
              dbg("Event type not allowed or missing; event_type=", tostring(event_type))
              return false
            end

            -- Body is expected to be a decoded table by Argo Events
            local payload = evt and evt.body or nil
            if type(payload) ~= "table" then
              dbg("Payload is not a table; type=", type(payload))
              return false
            end

            -- Validate repository and ref
            local repo = payload.repository
            if type(repo) ~= "table" or repo.name ~= TARGET_REPOSITORY then
              local actual = (type(repo) == "table" and repo.name) or tostring(repo)
              dbg("Repository mismatch; actual=", tostring(actual), "expected=", TARGET_REPOSITORY)
              return false
            end

            if payload.ref ~= TARGET_REF then
              dbg("Ref mismatch; actual=", tostring(payload.ref), "expected=", TARGET_REF)
              return false
            end

            dbg("Event accepted prelim checks; type=", event_type, "repo=", repo.name, "ref=", payload.ref)

            -- Create events are accepted once repo/ref match
            if event_type == "create" then
              dbg("Create event accepted")
              return true
            end

            -- For push events, inspect commits for matching path prefix
            if event_type == "push" then
              local commits = payload.commits
              if type(commits) ~= "table" then
                dbg("Commits missing or not a table; type=", type(commits))
                return false
              end

              dbg("Scanning commits; count=", #commits, "prefix=", TARGET_PATH_PREFIX)
              for _, commit in ipairs(commits) do
                if has_matching_files(commit) then
                  dbg("Push event accepted due to matching file path prefix")
                  return true
                end
              end

              dbg("No matching files found in push commits; rejecting")
              return false
            end

            dbg("Unhandled event type; rejecting: ", tostring(event_type))
            return false
          end

          return filter(event)
  triggers:
    - template:
        name: grafana-config-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: github-grafana-config-tf-
                namespace: grafana
              spec:
                entrypoint: terraform-deployment
                workflowTemplateRef:
                  name: grafana-config-tf-template
                arguments:
                  parameters:
                    - name: branch
                      value: "main"
                    - name: tf_path
                      value: "tf/grafana"
      