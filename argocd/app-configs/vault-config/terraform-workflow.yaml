apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: terraform-deployment-
spec:
  entrypoint: terraform-deployment
  serviceAccountName: argo-workflow-sa
  volumeClaimTemplates:
    - metadata:
        name: git-pvc
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  arguments:
    parameters:
      - name: branch
        value: "main"
      - name: workspace
        value: "main-cluster-vault"
      - name: tf_path
        value: "tf/vault"
  templates:
    - name: terraform-deployment
      steps:
        - - name: git-clone
            template: git-clone
        - - name: check-file-structure
            template: check-file-structure
        - - name: terraform-init
            template: terraform-init
        - - name: terraform-workspace-select
            template: terraform-workspace-select
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"
        - - name: terraform-plan
            template: terraform-plan
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"
        - - name: approval
            template: approval
        - - name: terraform-apply
            template: terraform-apply
            when: "{{steps.approval.outputs.parameters.approve}} == 'YES'"
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"

    - name: git-clone
      container:
        image: alpine/git
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Cleaning up /mnt/repo directory..."
            rm -rf /mnt/repo/* /mnt/repo/.[!.]* /mnt/repo/..?*
            echo "Directory cleaned. Cloning repository..."
            GIT_TOKEN=$(cat /mnt/github/token)
            git clone -b {{workflow.parameters.branch}} https://$GIT_TOKEN@github.com/fzymgc-house/selfhosted-cluster.git /mnt/repo
            if [ $? -eq 0 ]; then
              echo "Clone completed successfully. Contents of /mnt/repo:"
              ls -la /mnt/repo
            else
              echo "Failed to clone repository"
              exit 1
            fi
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo
          - name: github-secret
            mountPath: /mnt/github
      volumes:
        - name: github-secret
          secret:
            secretName: github-secret

    - name: check-file-structure
      container:
        image: alpine
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Checking file structure in /mnt/repo:"
            ls -al /mnt/repo
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo

    - name: terraform-init
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/repo/{{workflow.parameters.tf_path}}
            terraform init
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo

    - name: terraform-workspace-select
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/repo/{{workflow.parameters.tf_path}}
            terraform workspace select {{inputs.parameters.selected-workspace}} || terraform workspace new {{inputs.parameters.selected-workspace}}
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo

    - name: terraform-plan
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/repo/{{workflow.parameters.tf_path}}
            terraform plan -out=tfplan-{{inputs.parameters.selected-workspace}}
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo

    - name: approval
      suspend: {}
      inputs:
        parameters:
          - name: approve
            default: 'NO'
            enum:
              - 'YES'
              - 'NO'
            description: >-
              Choose YES to continue workflow and deploy to production
      outputs:
        parameters:
          - name: approve
            valueFrom:
              supplied: {}

    - name: terraform-apply
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/repo/{{workflow.parameters.tf_path}}
            terraform apply -input=false tfplan-{{inputs.parameters.selected-workspace}}
        volumeMounts:
          - name: git-pvc
            mountPath: /mnt/repo