apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: vault-config-tf-template
  namespace: vault
spec:
  entrypoint: terraform-deployment
  serviceAccountName: argo-workflow-sa
  volumes:
    - name: vault-certs
      configMap:
        name: fzymgc-ica1-ca
  volumeClaimTemplates:
    - metadata:
        name: working-dir-vol
      spec:
        storageClassName: longhorn
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  arguments:
    parameters:
      - name: branch
        value: "main"
      - name: workspace
        value: "main-cluster-vault"
      - name: tf_path
        value: "tf/vault"
  templates:
    - name: terraform-deployment
      steps:
        - - name: git-clone
            template: git-clone
        - - name: check-file-structure
            template: check-file-structure
        - - name: configure-terraform-cli
            template: configure-terraform-cli
        - - name: terraform-init
            template: terraform-init
        - - name: terraform-workspace-select
            template: terraform-workspace-select
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"
        - - name: terraform-plan
            template: terraform-plan
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"
        - - name: approval
            template: approval
        - - name: terraform-apply
            template: terraform-apply
            when: "{{steps.approval.outputs.parameters.approve}} == 'YES'"
            arguments:
              parameters:
                - name: selected-workspace
                  value: "{{workflow.parameters.workspace}}"

    - name: git-clone
      container:
        image: alpine/git
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Cleaning up /mnt/working-dir directory..."
            rm -rf /mnt/working-dir/* /mnt/working-dir/.[!.]* /mnt/working-dir/..?*
            echo "Directory cleaned. Cloning repository..."
            git clone -b {{workflow.parameters.branch}} https://$GIT_TOKEN@github.com/fzymgc-house/selfhosted-cluster.git /mnt/working-dir/repo
            if [ $? -eq 0 ]; then
              echo "Clone completed successfully. Contents of /mnt/working-dir/repo:"
              ls -la /mnt/working-dir/repo
            else
              echo "Failed to clone repository"
              exit 1
            fi
        env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: tf-workflow-secrets
                key: git_token
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir

    - name: check-file-structure
      container:
        image: alpine
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Checking file structure in /mnt/working-dir/repo:"
            ls -al /mnt/working-dir/repo
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir

    - name: configure-terraform-cli
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Creating .terraformrc file..."
            rm -f /mnt/working-dir/.terraformrc
            echo "credentials \"app.terraform.io\" { token = \"${TERRAFORM_TOKEN}\" }" > /mnt/working-dir/.terraformrc
            echo "plugin_cache_dir = \"/mnt/working-dir/.terraform.d/plugin-cache\"" >> /mnt/working-dir/.terraformrc
            mkdir -p /mnt/working-dir/.terraform.d/plugin-cache
            chmod 0600 /mnt/working-dir/.terraformrc
        env:
          - name: TF_CLI_CONFIG_FILE
            value: /mnt/working-dir/.terraformrc
          - name: TERRAFORM_TOKEN
            valueFrom:
              secretKeyRef:
                name: tf-workflow-secrets
                key: terraform_token
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir

    - name: terraform-init
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/working-dir/repo/{{workflow.parameters.tf_path}}
            terraform init
        env:
          - name: TF_CLI_CONFIG_FILE
            value: /mnt/working-dir/.terraformrc
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir

    - name: terraform-workspace-select
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/working-dir/repo/{{workflow.parameters.tf_path}}
            terraform workspace select {{inputs.parameters.selected-workspace}} || terraform workspace new {{inputs.parameters.selected-workspace}}
        env:
          - name: TF_CLI_CONFIG_FILE
            value: /mnt/working-dir/.terraformrc
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir

    - name: terraform-plan
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/working-dir/repo/{{workflow.parameters.tf_path}}
            terraform plan -out=tfplan-{{inputs.parameters.selected-workspace}}
        env:
          - name: TF_CLI_CONFIG_FILE
            value: /mnt/working-dir/.terraformrc
          - name: VAULT_ADDR
            value: https://vault-internal.vault:8200
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: tf-workflow-secrets
                key: vault_config_token
          - name: VAULT_CACERT
            value: /mnt/vault-certs/fullchain.crt
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir
          - name: vault-certs
            mountPath: /mnt/vault-certs

    - name: approval
      suspend: {}
      inputs:
        parameters:
          - name: approve
            default: 'NO'
            enum:
              - 'YES'
              - 'NO'
            description: >-
              Choose YES to continue workflow and deploy to production
      outputs:
        parameters:
          - name: approve
            valueFrom:
              supplied: {}

    - name: terraform-apply
      inputs:
        parameters:
          - name: selected-workspace
      container:
        image: hashicorp/terraform:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            cd /mnt/working-dir/repo/{{workflow.parameters.tf_path}}
            terraform apply -input=false tfplan-{{inputs.parameters.selected-workspace}}
        env:
          - name: TF_CLI_CONFIG_FILE
            value: /mnt/working-dir/.terraformrc
          - name: VAULT_ADDR
            value: https://vault-internal.vault:8200
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: tf-workflow-secrets
                key: vault_config_token
          - name: VAULT_CACERT
            value: /mnt/vault-certs/fullchain.crt
        volumeMounts:
          - name: working-dir-vol
            mountPath: /mnt/working-dir
          - name: vault-certs
            mountPath: /mnt/vault-certs
